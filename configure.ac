################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.61)
#
# The version number is extracted from include/alice.h using
# the version.sh script. Hence, it should be updated there.
# The version in git should reflect the *next* version planned.
#
AC_INIT([alice],[m4_esyscmd([./version.sh alice])],[alice@mallory.org])

AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR(config)
AC_CONFIG_HEADERS([src/platform.h])
AM_INIT_AUTOMAKE([subdir-objects tar-ustar foreign])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# This defines PACKAGE_VERSION_... in src/platform.h
PV_MAJOR=`echo $PACKAGE_VERSION | cut -d . -f 1`
PV_MINOR=`echo $PACKAGE_VERSION | cut -d . -f 2`
PV_PATCH=`echo $PACKAGE_VERSION | cut -d . -f 3`
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MAJOR],[$PV_MAJOR],
    [ALICE major version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MINOR],[$PV_MINOR],
    [ALICE minor version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_PATCH],[$PV_PATCH],
    [ALICE patchlevel])
# This lets us use PACKAGE_VERSION in Makefiles
AC_SUBST(PACKAGE_VERSION)

#
# Libtool -version-info (ABI version)
#
# Currently 2.0.1 ("stable"). Don't change this unless you
# know exactly what you're doing and have read and understand
# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
#
# libalice -version-info
LTVER="0:0:0"
AC_SUBST(LTVER)

# Capture c flags
ALICE_ORIG_CFLAGS="${CFLAGS:-none}"

# Checks for programs
AC_PROG_CC
AC_PROG_CC_C99
AM_PROG_CC_C_O
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_PROG_SED
AC_PROG_AWK
PKG_PROG_PKG_CONFIG

# Code coverage
AC_ARG_WITH(gcov, [AS_HELP_STRING([--with-gcov=yes/no],
                  [With GCC Code Coverage reporting.])],
                  [ALICE_GCOV="$withval"])

if test "x${ALICE_GCOV}" == "xyes"; then
    CFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"

    if test "x${ALICE_ORIG_CFLAGS}" != "xnone"; then
        CFLAGS="${CFLAGS} ${ALICE_ORIG_CFLAGS}"
    fi
fi

PREVIOUS_CFLAGS="${CFLAGS}"
PREVIOUS_LIBS="${LIBS}"


was_libzmq_check_lib_detected=no

PKG_CHECK_MODULES([libzmq], [libzmq >= 4.2.0],
    [
    ],
    [
        AC_MSG_ERROR([Cannot find required package for libzmq. Note, pkg-config is required due to specified version >= 4.2.0])
    ])

if test "x$was_libzmq_check_lib_detected" = "xno"; then
    CFLAGS="${libzmq_CFLAGS} ${CFLAGS}"
    LIBS="${libzmq_LIBS} ${LIBS}"
fi


was_czmq_check_lib_detected=no

PKG_CHECK_MODULES([czmq], [libczmq >= 3.0.1],
    [
    ],
    [
        AC_MSG_ERROR([Cannot find required package for libczmq. Note, pkg-config is required due to specified version >= 3.0.1])
    ])

if test "x$was_czmq_check_lib_detected" = "xno"; then
    CFLAGS="${czmq_CFLAGS} ${CFLAGS}"
    LIBS="${czmq_LIBS} ${LIBS}"
fi


was_malamute_check_lib_detected=no

PKG_CHECK_MODULES([malamute], [libmlm >= 0.0.0],
    [
    ],
    [
        AC_ARG_WITH([libmlm],
            [
                AS_HELP_STRING([--with-libmlm],
                [Specify libmlm prefix])
            ],
            [search_libmlm="yes"],
            [])

        malamute_synthetic_cflags=""
        malamute_synthetic_libs="-lmlm"

        if test "x$search_libmlm" = "xyes"; then
            if test -r "${with_libmlm}/include/malamute.h"; then
                malamute_synthetic_cflags="-I${with_libmlm}/include"
                malamute_synthetic_libs="-L${with_libmlm}/lib -lmlm"
            else
                AC_MSG_ERROR([${with_libmlm}/include/malamute.h not found. Please check libmlm prefix])
            fi
        fi

        AC_CHECK_LIB([libmlm], [mlm_server_test],
            [
                CFLAGS="${malamute_synthetic_cflags} ${CFLAGS}"
                LDFLAGS="${malamute_synthetic_libs} ${LDFLAGS}"
                LIBS="${malamute_synthetic_libs} ${LIBS}"

                AC_SUBST([malamute_CFLAGS],[${malamute_synthetic_cflags}])
                AC_SUBST([malamute_LIBS],[${malamute_synthetic_libs}])
                was_malamute_check_lib_detected=yes
            ],
            [AC_MSG_ERROR([cannot link with -lmlm, install libmlm.])])
    ])

if test "x$was_malamute_check_lib_detected" = "xno"; then
    CFLAGS="${malamute_CFLAGS} ${CFLAGS}"
    LIBS="${malamute_LIBS} ${LIBS}"
fi


CFLAGS="${PREVIOUS_CFLAGS}"
LIBS="${PREVIOUS_LIBS}"

# Platform specific checks
alice_on_mingw32="no"
alice_on_cygwin="no"
alice_on_android="no"

# Host specific checks
AC_CANONICAL_HOST

# Determine whether or not documentation should be built and installed.
alice_build_doc="yes"
alice_install_man="yes"

# Check for asciidoc and xmlto and don't build the docs if these are not installed.
AC_CHECK_PROG(alice_have_asciidoc, asciidoc, yes, no)
AC_CHECK_PROG(alice_have_xmlto, xmlto, yes, no)
if test "x$alice_have_asciidoc" = "xno" -o "x$alice_have_xmlto" = "xno"; then
    alice_build_doc="no"
    # Tarballs built with 'make dist' ship with prebuilt documentation.
    if ! test -f doc/alice.7; then
        alice_install_man="no"
        AC_MSG_WARN([You are building an unreleased version of ALICE and asciidoc or xmlto are not installed.])
        AC_MSG_WARN([Documentation will not be built and manual pages will not be installed.])
    fi
fi
AC_MSG_CHECKING([whether to build documentation])
AC_MSG_RESULT([$alice_build_doc])
AC_MSG_CHECKING([whether to install manpages])
AC_MSG_RESULT([$alice_install_man])

# Set some default features required by libalice code.
CPPFLAGS="-D_REENTRANT -D_THREAD_SAFE $CPPFLAGS"

# OS-specific tests
case "${host_os}" in
    *linux*)
        # Define on Linux to enable all library features
        CPPFLAGS="-D_GNU_SOURCE -DLINUX $CPPFLAGS"
        AC_DEFINE(ALICE_HAVE_LINUX, 1, [Have Linux OS])

        case "${host_os}" in
            *android*)
                AC_DEFINE(ALICE_HAVE_ANDROID, 1, [Have Android OS])
                alice_on_android="yes"
            ;;
        esac
        ;;
    *solaris*)
        # Define on Solaris to enable all library features
        CPPFLAGS="-D_PTHREADS $CPPFLAGS"
        AC_DEFINE(ALICE_HAVE_SOLARIS, 1, [Have Solaris OS])
        CFLAGS="${CFLAGS} -lsocket -lssp"
        ;;
    *freebsd*)
        # Define on FreeBSD to enable all library features
        CPPFLAGS="-D__BSD_VISIBLE $CPPFLAGS"
        AC_DEFINE(ALICE_HAVE_FREEBSD, 1, [Have FreeBSD OS])
        ;;
    *darwin*)
        # Define on Darwin to enable all library features
        CPPFLAGS="-D_DARWIN_C_SOURCE $CPPFLAGS"
        AC_DEFINE(ALICE_HAVE_OSX, 1, [Have DarwinOSX OS])
        ;;
    *netbsd*)
        # Define on NetBSD to enable all library features
        CPPFLAGS="-D_NETBSD_SOURCE $CPPFLAGS"
        AC_DEFINE(ALICE_HAVE_NETBSD, 1, [Have NetBSD OS])
        ;;
    *openbsd*)
        # Define on OpenBSD to enable all library features
        CPPFLAGS="-D_BSD_SOURCE $CPPFLAGS"
        AC_DEFINE(ALICE_HAVE_OPENBSD, 1, [Have OpenBSD OS])
        ;;
    *nto-qnx*)
        AC_DEFINE(ALICE_HAVE_QNXNTO, 1, [Have QNX Neutrino OS])
        ;;
    *aix*)
        AC_DEFINE(ALICE_HAVE_AIX, 1, [Have AIX OS])
        ;;
    *hpux*)
        # Define on HP-UX to enable all library features
        CPPFLAGS="-D_POSIX_C_SOURCE=200112L"
        AC_DEFINE(ALICE_HAVE_HPUX, 1, [Have HPUX OS])
        ;;
    *mingw32*)
        AC_DEFINE(ALICE_HAVE_WINDOWS, 1, [Have Windows OS])
        AC_DEFINE(ALICE_HAVE_MINGW32, 1, [Have MinGW32])
        AC_CHECK_HEADERS(windows.h)
        alice_on_mingw32="yes"
        alice_install_man="no"
        ;;
    *cygwin*)
        # Define on Cygwin to enable all library features
        CPPFLAGS="-D_GNU_SOURCE $CPPFLAGS"
        AC_DEFINE(ALICE_HAVE_CYGWIN, 1, [Have Cygwin])
        alice_on_cygwin="yes"
        ;;
    *)
        AC_MSG_ERROR([unsupported system: ${host_os}.])
        ;;
esac

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(errno.h arpa/inet.h netinet/tcp.h netinet/in.h stddef.h \
                 stdlib.h string.h sys/socket.h sys/time.h unistd.h \
                 limits.h ifaddrs.h)
AC_CHECK_HEADERS([net/if.h net/if_media.h linux/wireless.h], [], [],
[
#ifdef HAVE_SYS_SOCKET_H
# include <sys/socket.h>
#endif
#include <stdint.h>
])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_HEADER_TIME
AC_TYPE_UINT32_T
AC_C_VOLATILE
AC_C_BIGENDIAN

# These options are GNU compiler specific.
if test "x$GCC" = "xyes"; then
    CPPFLAGS="-pedantic -Werror -Wall -Wc++-compat ${CPPFLAGS}"
fi

AM_CONDITIONAL(ENABLE_SHARED, test "x$enable_shared" = "xyes")
AM_CONDITIONAL(ON_MINGW, test "x$alice_on_mingw32" = "xyes")
AM_CONDITIONAL(ON_CYGWIN, test "x$alice_on_cygwin" = "xyes")
AM_CONDITIONAL(ON_ANDROID, test "x$alice_on_android" = "xyes")
AM_CONDITIONAL(INSTALL_MAN, test "x$alice_install_man" = "xyes")
AM_CONDITIONAL(BUILD_DOC, test "x$alice_build_doc" = "xyes")

# Check for ups intent
AC_ARG_WITH([ups],
    AS_HELP_STRING([--with-ups],
        [Compile and install the ups program [default=yes].]),
    [with_ups=$withval],
    [with_ups=yes])

AM_CONDITIONAL([WITH_UPS], [test x$with_ups != xno])
AM_COND_IF([WITH_UPS], [AC_MSG_NOTICE([WITH_UPS defined])])

# Check for tnh intent
AC_ARG_WITH([tnh],
    AS_HELP_STRING([--with-tnh],
        [Compile and install the tnh program [default=yes].]),
    [with_tnh=$withval],
    [with_tnh=yes])

AM_CONDITIONAL([WITH_TNH], [test x$with_tnh != xno])
AM_COND_IF([WITH_TNH], [AC_MSG_NOTICE([WITH_TNH defined])])

# Check for comp intent
AC_ARG_WITH([comp],
    AS_HELP_STRING([--with-comp],
        [Compile and install the comp program [default=yes].]),
    [with_comp=$withval],
    [with_comp=yes])

AM_CONDITIONAL([WITH_COMP], [test x$with_comp != xno])
AM_COND_IF([WITH_COMP], [AC_MSG_NOTICE([WITH_COMP defined])])

# Check for ui intent
AC_ARG_WITH([ui],
    AS_HELP_STRING([--with-ui],
        [Compile and install the ui program [default=yes].]),
    [with_ui=$withval],
    [with_ui=yes])

AM_CONDITIONAL([WITH_UI], [test x$with_ui != xno])
AM_COND_IF([WITH_UI], [AC_MSG_NOTICE([WITH_UI defined])])

# Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(perror gettimeofday memset getifaddrs)

# Set pkgconfigdir
AC_ARG_WITH([pkgconfigdir], AS_HELP_STRING([--with-pkgconfigdir=PATH],
    [Path to the pkgconfig directory [[LIBDIR/pkgconfig]]]),
    [pkgconfigdir="$withval"], [pkgconfigdir='${libdir}/pkgconfig'])
AC_SUBST([pkgconfigdir])

# Specify output files
AC_CONFIG_FILES([Makefile])
AC_OUTPUT

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
